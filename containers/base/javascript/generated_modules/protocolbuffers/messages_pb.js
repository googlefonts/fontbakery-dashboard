/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var shared_pb = require('./shared_pb.js');
goog.object.extend(proto, shared_pb);
goog.exportSymbol('proto.fontbakery.dashboard.AuthStatus', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthStatus.StatusCode', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthorizeRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthorizedRoles', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.AuthorizedRolesRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CollectionFamilyJob', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.CompletedWorker', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.DispatcherInitProcess', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyData', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyData.Result', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyJob', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyNamesList', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FamilyRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.FontBakeryFinished', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.GenericStorageWorkerResult', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.GenericStorageWorkerResult.Result', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.GitHubReport', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.GitHubReport.Result', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.Issue', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ManifestSourceId', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.OAuthToken', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessCommand', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessCommandResult', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessCommandResult.Result', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessList', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessListItem', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessListQuery', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessQuery', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ProcessState', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.PullRequest', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.Report', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportIds', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery.Filter', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery.Filter.Type', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.ReportsQuery.Pagination', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.SessionId', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.SourceDetails', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.StorageItem', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.StorageKey', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.StorageStatus', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.WorkerDescription', null, global);
goog.exportSymbol('proto.fontbakery.dashboard.WorkerJobDescription', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyJob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.FamilyJob.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyJob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyJob.displayName = 'proto.fontbakery.dashboard.FamilyJob';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.FamilyJob.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyJob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyJob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyJob.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cacheKey: (f = msg.getCacheKey()) && proto.fontbakery.dashboard.StorageKey.toObject(includeInstance, f),
    jobid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orderList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyJob}
 */
proto.fontbakery.dashboard.FamilyJob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyJob;
  return proto.fontbakery.dashboard.FamilyJob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyJob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyJob}
 */
proto.fontbakery.dashboard.FamilyJob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = new proto.fontbakery.dashboard.StorageKey;
      reader.readMessage(value,proto.fontbakery.dashboard.StorageKey.deserializeBinaryFromReader);
      msg.setCacheKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyJob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyJob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyJob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCacheKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fontbakery.dashboard.StorageKey.serializeBinaryToWriter
    );
  }
  f = message.getJobid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string docid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setDocid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StorageKey cache_key = 2;
 * @return {?proto.fontbakery.dashboard.StorageKey}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getCacheKey = function() {
  return /** @type{?proto.fontbakery.dashboard.StorageKey} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.StorageKey, 2));
};


/** @param {?proto.fontbakery.dashboard.StorageKey|undefined} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setCacheKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.FamilyJob.prototype.clearCacheKey = function() {
  this.setCacheKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.hasCacheKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string jobid = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getJobid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setJobid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated string order = 4;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.FamilyJob.prototype.getOrderList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.FamilyJob.prototype.setOrderList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.FamilyJob.prototype.addOrder = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.fontbakery.dashboard.FamilyJob.prototype.clearOrderList = function() {
  this.setOrderList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.StorageItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.StorageItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.StorageItem.displayName = 'proto.fontbakery.dashboard.StorageItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.StorageItem.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.StorageItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.StorageItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.StorageItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.StorageItem}
 */
proto.fontbakery.dashboard.StorageItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.StorageItem;
  return proto.fontbakery.dashboard.StorageItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.StorageItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.StorageItem}
 */
proto.fontbakery.dashboard.StorageItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.StorageItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.StorageItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.StorageItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.StorageItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional google.protobuf.Any payload = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.StorageItem.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.StorageItem.prototype.setPayload = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fontbakery.dashboard.StorageItem.prototype.clearPayload = function() {
  this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.StorageItem.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string clientid = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.StorageItem.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.StorageItem.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.StorageKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.StorageKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.StorageKey.displayName = 'proto.fontbakery.dashboard.StorageKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.StorageKey.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.StorageKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.StorageKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.StorageKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    force: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.StorageKey}
 */
proto.fontbakery.dashboard.StorageKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.StorageKey;
  return proto.fontbakery.dashboard.StorageKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.StorageKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.StorageKey}
 */
proto.fontbakery.dashboard.StorageKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setForce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.StorageKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.StorageKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.StorageKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.StorageKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getForce();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.StorageKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.StorageKey.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hash = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.StorageKey.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.StorageKey.prototype.setHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clientid = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.StorageKey.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.StorageKey.prototype.setClientid = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool force = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.StorageKey.prototype.getForce = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.StorageKey.prototype.setForce = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.StorageStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.StorageStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.StorageStatus.displayName = 'proto.fontbakery.dashboard.StorageStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.StorageStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.StorageStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.StorageStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.StorageStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    instances: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.StorageStatus}
 */
proto.fontbakery.dashboard.StorageStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.StorageStatus;
  return proto.fontbakery.dashboard.StorageStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.StorageStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.StorageStatus}
 */
proto.fontbakery.dashboard.StorageStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.StorageStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.StorageStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.StorageStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.StorageStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInstances();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.StorageStatus.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.StorageStatus.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 instances = 2;
 * @return {number}
 */
proto.fontbakery.dashboard.StorageStatus.prototype.getInstances = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.fontbakery.dashboard.StorageStatus.prototype.setInstances = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ManifestSourceId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ManifestSourceId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ManifestSourceId.displayName = 'proto.fontbakery.dashboard.ManifestSourceId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ManifestSourceId.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ManifestSourceId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ManifestSourceId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ManifestSourceId.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ManifestSourceId}
 */
proto.fontbakery.dashboard.ManifestSourceId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ManifestSourceId;
  return proto.fontbakery.dashboard.ManifestSourceId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ManifestSourceId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ManifestSourceId}
 */
proto.fontbakery.dashboard.ManifestSourceId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ManifestSourceId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ManifestSourceId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ManifestSourceId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ManifestSourceId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string source_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ManifestSourceId.prototype.getSourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ManifestSourceId.prototype.setSourceId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyNamesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.FamilyNamesList.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyNamesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyNamesList.displayName = 'proto.fontbakery.dashboard.FamilyNamesList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.FamilyNamesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyNamesList.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyNamesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyNamesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyNamesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    familyNamesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyNamesList}
 */
proto.fontbakery.dashboard.FamilyNamesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyNamesList;
  return proto.fontbakery.dashboard.FamilyNamesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyNamesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyNamesList}
 */
proto.fontbakery.dashboard.FamilyNamesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addFamilyNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyNamesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyNamesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyNamesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyNamesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFamilyNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string family_names = 1;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.FamilyNamesList.prototype.getFamilyNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.FamilyNamesList.prototype.setFamilyNamesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.FamilyNamesList.prototype.addFamilyNames = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.fontbakery.dashboard.FamilyNamesList.prototype.clearFamilyNamesList = function() {
  this.setFamilyNamesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyRequest.displayName = 'proto.fontbakery.dashboard.FamilyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    familyName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    processCommand: (f = msg.getProcessCommand()) && proto.fontbakery.dashboard.ProcessCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyRequest}
 */
proto.fontbakery.dashboard.FamilyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyRequest;
  return proto.fontbakery.dashboard.FamilyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyRequest}
 */
proto.fontbakery.dashboard.FamilyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamilyName(value);
      break;
    case 3:
      var value = new proto.fontbakery.dashboard.ProcessCommand;
      reader.readMessage(value,proto.fontbakery.dashboard.ProcessCommand.deserializeBinaryFromReader);
      msg.setProcessCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFamilyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProcessCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.fontbakery.dashboard.ProcessCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.getSourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyRequest.prototype.setSourceId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string family_name = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.getFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyRequest.prototype.setFamilyName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ProcessCommand process_command = 3;
 * @return {?proto.fontbakery.dashboard.ProcessCommand}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.getProcessCommand = function() {
  return /** @type{?proto.fontbakery.dashboard.ProcessCommand} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.ProcessCommand, 3));
};


/** @param {?proto.fontbakery.dashboard.ProcessCommand|undefined} value */
proto.fontbakery.dashboard.FamilyRequest.prototype.setProcessCommand = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fontbakery.dashboard.FamilyRequest.prototype.clearProcessCommand = function() {
  this.setProcessCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FamilyRequest.prototype.hasProcessCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.SourceDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.fontbakery.dashboard.SourceDetails.oneofGroups_);
};
goog.inherits(proto.fontbakery.dashboard.SourceDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.SourceDetails.displayName = 'proto.fontbakery.dashboard.SourceDetails';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.fontbakery.dashboard.SourceDetails.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.fontbakery.dashboard.SourceDetails.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JSON_PAYLOAD: 1,
  PB_PAYLOAD: 2
};

/**
 * @return {proto.fontbakery.dashboard.SourceDetails.PayloadCase}
 */
proto.fontbakery.dashboard.SourceDetails.prototype.getPayloadCase = function() {
  return /** @type {proto.fontbakery.dashboard.SourceDetails.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.fontbakery.dashboard.SourceDetails.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.SourceDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.SourceDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.SourceDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.SourceDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    jsonPayload: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pbPayload: (f = msg.getPbPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.SourceDetails}
 */
proto.fontbakery.dashboard.SourceDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.SourceDetails;
  return proto.fontbakery.dashboard.SourceDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.SourceDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.SourceDetails}
 */
proto.fontbakery.dashboard.SourceDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonPayload(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPbPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.SourceDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.SourceDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.SourceDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.SourceDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPbPayload();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string json_payload = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.SourceDetails.prototype.getJsonPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.SourceDetails.prototype.setJsonPayload = function(value) {
  jspb.Message.setOneofField(this, 1, proto.fontbakery.dashboard.SourceDetails.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.SourceDetails.prototype.clearJsonPayload = function() {
  jspb.Message.setOneofField(this, 1, proto.fontbakery.dashboard.SourceDetails.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.SourceDetails.prototype.hasJsonPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Any pb_payload = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.SourceDetails.prototype.getPbPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.SourceDetails.prototype.setPbPayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.fontbakery.dashboard.SourceDetails.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.SourceDetails.prototype.clearPbPayload = function() {
  this.setPbPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.SourceDetails.prototype.hasPbPayload = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CollectionFamilyJob = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CollectionFamilyJob, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CollectionFamilyJob.displayName = 'proto.fontbakery.dashboard.CollectionFamilyJob';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CollectionFamilyJob.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CollectionFamilyJob} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CollectionFamilyJob.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    familyName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    cacheKey: (f = msg.getCacheKey()) && proto.fontbakery.dashboard.StorageKey.toObject(includeInstance, f),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    metadata: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CollectionFamilyJob}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CollectionFamilyJob;
  return proto.fontbakery.dashboard.CollectionFamilyJob.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CollectionFamilyJob} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CollectionFamilyJob}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamilyName(value);
      break;
    case 3:
      var value = new proto.fontbakery.dashboard.StorageKey;
      reader.readMessage(value,proto.fontbakery.dashboard.StorageKey.deserializeBinaryFromReader);
      msg.setCacheKey(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CollectionFamilyJob.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CollectionFamilyJob} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CollectionFamilyJob.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFamilyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCacheKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.fontbakery.dashboard.StorageKey.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string collectionid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getCollectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setCollectionid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string family_name = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setFamilyName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional StorageKey cache_key = 3;
 * @return {?proto.fontbakery.dashboard.StorageKey}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getCacheKey = function() {
  return /** @type{?proto.fontbakery.dashboard.StorageKey} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.StorageKey, 3));
};


/** @param {?proto.fontbakery.dashboard.StorageKey|undefined} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setCacheKey = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fontbakery.dashboard.CollectionFamilyJob.prototype.clearCacheKey = function() {
  this.setCacheKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.hasCacheKey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp date = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.CollectionFamilyJob.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.hasDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string metadata = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CollectionFamilyJob.prototype.setMetadata = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FamilyData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.FamilyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FamilyData.displayName = 'proto.fontbakery.dashboard.FamilyData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FamilyData.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FamilyData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FamilyData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyData.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errorCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    collectionid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    familyName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    files: (f = msg.getFiles()) && shared_pb.Files.toObject(includeInstance, f),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    metadata: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FamilyData}
 */
proto.fontbakery.dashboard.FamilyData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FamilyData;
  return proto.fontbakery.dashboard.FamilyData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FamilyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FamilyData}
 */
proto.fontbakery.dashboard.FamilyData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.FamilyData.Result} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamilyName(value);
      break;
    case 6:
      var value = new shared_pb.Files;
      reader.readMessage(value,shared_pb.Files.deserializeBinaryFromReader);
      msg.setFiles(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FamilyData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FamilyData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FamilyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FamilyData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getErrorCode();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCollectionid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFamilyName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFiles();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      shared_pb.Files.serializeBinaryToWriter
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.FamilyData.Result = {
  FAIL: 0,
  OK: 1
};

/**
 * optional Result status = 1;
 * @return {!proto.fontbakery.dashboard.FamilyData.Result}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getStatus = function() {
  return /** @type {!proto.fontbakery.dashboard.FamilyData.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.FamilyData.Result} value */
proto.fontbakery.dashboard.FamilyData.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyData.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 error_code = 3;
 * @return {number}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getErrorCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.fontbakery.dashboard.FamilyData.prototype.setErrorCode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string collectionid = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getCollectionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyData.prototype.setCollectionid = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string family_name = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getFamilyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyData.prototype.setFamilyName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional Files files = 6;
 * @return {?proto.fontbakery.dashboard.Files}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getFiles = function() {
  return /** @type{?proto.fontbakery.dashboard.Files} */ (
    jspb.Message.getWrapperField(this, shared_pb.Files, 6));
};


/** @param {?proto.fontbakery.dashboard.Files|undefined} value */
proto.fontbakery.dashboard.FamilyData.prototype.setFiles = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.fontbakery.dashboard.FamilyData.prototype.clearFiles = function() {
  this.setFiles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FamilyData.prototype.hasFiles = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp date = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.FamilyData.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.fontbakery.dashboard.FamilyData.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FamilyData.prototype.hasDate = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string metadata = 8;
 * @return {string}
 */
proto.fontbakery.dashboard.FamilyData.prototype.getMetadata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FamilyData.prototype.setMetadata = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.Report = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.Report, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.Report.displayName = 'proto.fontbakery.dashboard.Report';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.Report.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.Report.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.Report} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.Report.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    typeId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    method: jspb.Message.getFieldWithDefault(msg, 3, ""),
    started: (f = msg.getStarted()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    finished: (f = msg.getFinished()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    data: jspb.Message.getFieldWithDefault(msg, 6, ""),
    id: jspb.Message.getFieldWithDefault(msg, 7, ""),
    reported: (f = msg.getReported()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.Report}
 */
proto.fontbakery.dashboard.Report.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.Report;
  return proto.fontbakery.dashboard.Report.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.Report} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.Report}
 */
proto.fontbakery.dashboard.Report.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 8:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReported(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.Report.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.Report.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.Report} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.Report.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTypeId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getReported();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getTypeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setTypeId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp started = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.Report.prototype.getStarted = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.Report.prototype.setStarted = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.Report.prototype.clearStarted = function() {
  this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.Report.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp finished = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.Report.prototype.getFinished = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.Report.prototype.setFinished = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.fontbakery.dashboard.Report.prototype.clearFinished = function() {
  this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.Report.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string data = 6;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string id = 7;
 * @return {string}
 */
proto.fontbakery.dashboard.Report.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Report.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional google.protobuf.Timestamp reported = 8;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.Report.prototype.getReported = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 8));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.Report.prototype.setReported = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.fontbakery.dashboard.Report.prototype.clearReported = function() {
  this.setReported(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.Report.prototype.hasReported = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportsQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportsQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportsQuery.displayName = 'proto.fontbakery.dashboard.ReportsQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportsQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportsQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    filtersMap: (f = msg.getFiltersMap()) ? f.toObject(includeInstance, proto.fontbakery.dashboard.ReportsQuery.Filter.toObject) : [],
    pagination: (f = msg.getPagination()) && proto.fontbakery.dashboard.ReportsQuery.Pagination.toObject(includeInstance, f),
    includeData: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportsQuery}
 */
proto.fontbakery.dashboard.ReportsQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportsQuery;
  return proto.fontbakery.dashboard.ReportsQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportsQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportsQuery}
 */
proto.fontbakery.dashboard.ReportsQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFiltersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = new proto.fontbakery.dashboard.ReportsQuery.Pagination;
      reader.readMessage(value,proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportsQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportsQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFiltersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.fontbakery.dashboard.ReportsQuery.Filter.serializeBinaryToWriter);
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.fontbakery.dashboard.ReportsQuery.Pagination.serializeBinaryToWriter
    );
  }
  f = message.getIncludeData();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportsQuery.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.ReportsQuery.Filter.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportsQuery.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportsQuery.Filter.displayName = 'proto.fontbakery.dashboard.ReportsQuery.Filter';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportsQuery.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valuesList: jspb.Message.getRepeatedField(msg, 2),
    minMaxDatesList: jspb.Message.toObjectList(msg.getMinMaxDatesList(),
    google_protobuf_timestamp_pb.Timestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Filter}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportsQuery.Filter;
  return proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Filter}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.addMinMaxDates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportsQuery.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getMinMaxDatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.Type = {
  VALUE: 0,
  DATE: 1
};

/**
 * optional Type type = 1;
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.getType = function() {
  return /** @type {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.ReportsQuery.Filter.Type} value */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated string values = 2;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.clearValuesList = function() {
  this.setValuesList([]);
};


/**
 * repeated google.protobuf.Timestamp min_max_dates = 3;
 * @return {!Array<!proto.google.protobuf.Timestamp>}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.getMinMaxDatesList = function() {
  return /** @type{!Array<!proto.google.protobuf.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {!Array<!proto.google.protobuf.Timestamp>} value */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.setMinMaxDatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.google.protobuf.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.addMinMaxDates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.google.protobuf.Timestamp, opt_index);
};


proto.fontbakery.dashboard.ReportsQuery.Filter.prototype.clearMinMaxDatesList = function() {
  this.setMinMaxDatesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportsQuery.Pagination, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportsQuery.Pagination.displayName = 'proto.fontbakery.dashboard.ReportsQuery.Pagination';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportsQuery.Pagination.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Pagination} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemReported: (f = msg.getItemReported()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    itemId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    previousPage: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Pagination}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportsQuery.Pagination;
  return proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Pagination} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportsQuery.Pagination}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setItemReported(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItemId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreviousPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportsQuery.Pagination.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportsQuery.Pagination} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemReported();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getItemId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPreviousPage();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp item_reported = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.getItemReported = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.setItemReported = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.clearItemReported = function() {
  this.setItemReported(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.hasItemReported = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string item_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.getItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.setItemId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool previous_page = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.getPreviousPage = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.ReportsQuery.Pagination.prototype.setPreviousPage = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * map<string, Filter> filters = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.fontbakery.dashboard.ReportsQuery.Filter>}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.getFiltersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.fontbakery.dashboard.ReportsQuery.Filter>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.fontbakery.dashboard.ReportsQuery.Filter));
};


proto.fontbakery.dashboard.ReportsQuery.prototype.clearFiltersMap = function() {
  this.getFiltersMap().clear();
};


/**
 * optional Pagination pagination = 4;
 * @return {?proto.fontbakery.dashboard.ReportsQuery.Pagination}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.getPagination = function() {
  return /** @type{?proto.fontbakery.dashboard.ReportsQuery.Pagination} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.ReportsQuery.Pagination, 4));
};


/** @param {?proto.fontbakery.dashboard.ReportsQuery.Pagination|undefined} value */
proto.fontbakery.dashboard.ReportsQuery.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.ReportsQuery.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool include_data = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ReportsQuery.prototype.getIncludeData = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.ReportsQuery.prototype.setIncludeData = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ReportIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.ReportIds.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.ReportIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ReportIds.displayName = 'proto.fontbakery.dashboard.ReportIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.ReportIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ReportIds.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ReportIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ReportIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ReportIds}
 */
proto.fontbakery.dashboard.ReportIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ReportIds;
  return proto.fontbakery.dashboard.ReportIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ReportIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ReportIds}
 */
proto.fontbakery.dashboard.ReportIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ReportIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ReportIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ReportIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ReportIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.ReportIds.prototype.getIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.ReportIds.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.ReportIds.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.fontbakery.dashboard.ReportIds.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessCommandResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessCommandResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessCommandResult.displayName = 'proto.fontbakery.dashboard.ProcessCommandResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessCommandResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessCommandResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommandResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessCommandResult}
 */
proto.fontbakery.dashboard.ProcessCommandResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessCommandResult;
  return proto.fontbakery.dashboard.ProcessCommandResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessCommandResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessCommandResult}
 */
proto.fontbakery.dashboard.ProcessCommandResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.ProcessCommandResult.Result} */ (reader.readEnum());
      msg.setResult(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessCommandResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessCommandResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommandResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.ProcessCommandResult.Result = {
  FAIL: 0,
  OK: 1
};

/**
 * optional Result result = 1;
 * @return {!proto.fontbakery.dashboard.ProcessCommandResult.Result}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.getResult = function() {
  return /** @type {!proto.fontbakery.dashboard.ProcessCommandResult.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.ProcessCommandResult.Result} value */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.setResult = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommandResult.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.DispatcherInitProcess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.DispatcherInitProcess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.DispatcherInitProcess.displayName = 'proto.fontbakery.dashboard.DispatcherInitProcess';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.DispatcherInitProcess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.DispatcherInitProcess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.DispatcherInitProcess.toObject = function(includeInstance, msg) {
  var f, obj = {
    requester: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jsonPayload: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.DispatcherInitProcess}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.DispatcherInitProcess;
  return proto.fontbakery.dashboard.DispatcherInitProcess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.DispatcherInitProcess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.DispatcherInitProcess}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequester(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.DispatcherInitProcess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.DispatcherInitProcess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.DispatcherInitProcess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequester();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJsonPayload();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string requester = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.getRequester = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.setRequester = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string json_payload = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.getJsonPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.DispatcherInitProcess.prototype.setJsonPayload = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessQuery.displayName = 'proto.fontbakery.dashboard.ProcessQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessQuery}
 */
proto.fontbakery.dashboard.ProcessQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessQuery;
  return proto.fontbakery.dashboard.ProcessQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessQuery}
 */
proto.fontbakery.dashboard.ProcessQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessQuery.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessQuery.prototype.setProcessId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessState.displayName = 'proto.fontbakery.dashboard.ProcessState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessState.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessState.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    processData: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userInterface: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessState}
 */
proto.fontbakery.dashboard.ProcessState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessState;
  return proto.fontbakery.dashboard.ProcessState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessState}
 */
proto.fontbakery.dashboard.ProcessState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessData(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserInterface(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProcessData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserInterface();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessState.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessState.prototype.setProcessId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string process_data = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessState.prototype.getProcessData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessState.prototype.setProcessData = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string user_interface = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessState.prototype.getUserInterface = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessState.prototype.setUserInterface = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessListQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessListQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessListQuery.displayName = 'proto.fontbakery.dashboard.ProcessListQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessListQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessListQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessListQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessListQuery}
 */
proto.fontbakery.dashboard.ProcessListQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessListQuery;
  return proto.fontbakery.dashboard.ProcessListQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessListQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessListQuery}
 */
proto.fontbakery.dashboard.ProcessListQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessListQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessListQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessListQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessListQuery.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessListQuery.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessListItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessListItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessListItem.displayName = 'proto.fontbakery.dashboard.ProcessListItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessListItem.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessListItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessListItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    processId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessListItem}
 */
proto.fontbakery.dashboard.ProcessListItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessListItem;
  return proto.fontbakery.dashboard.ProcessListItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessListItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessListItem}
 */
proto.fontbakery.dashboard.ProcessListItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcessId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessListItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessListItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessListItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessListItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string process_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessListItem.prototype.getProcessId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessListItem.prototype.setProcessId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.ProcessList.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.ProcessList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessList.displayName = 'proto.fontbakery.dashboard.ProcessList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.ProcessList.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessList.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessList.toObject = function(includeInstance, msg) {
  var f, obj = {
    processesList: jspb.Message.toObjectList(msg.getProcessesList(),
    proto.fontbakery.dashboard.ProcessListItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessList}
 */
proto.fontbakery.dashboard.ProcessList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessList;
  return proto.fontbakery.dashboard.ProcessList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessList}
 */
proto.fontbakery.dashboard.ProcessList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.fontbakery.dashboard.ProcessListItem;
      reader.readMessage(value,proto.fontbakery.dashboard.ProcessListItem.deserializeBinaryFromReader);
      msg.addProcesses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcessesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.fontbakery.dashboard.ProcessListItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcessListItem processes = 6;
 * @return {!Array<!proto.fontbakery.dashboard.ProcessListItem>}
 */
proto.fontbakery.dashboard.ProcessList.prototype.getProcessesList = function() {
  return /** @type{!Array<!proto.fontbakery.dashboard.ProcessListItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fontbakery.dashboard.ProcessListItem, 6));
};


/** @param {!Array<!proto.fontbakery.dashboard.ProcessListItem>} value */
proto.fontbakery.dashboard.ProcessList.prototype.setProcessesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.fontbakery.dashboard.ProcessListItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fontbakery.dashboard.ProcessListItem}
 */
proto.fontbakery.dashboard.ProcessList.prototype.addProcesses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.fontbakery.dashboard.ProcessListItem, opt_index);
};


proto.fontbakery.dashboard.ProcessList.prototype.clearProcessesList = function() {
  this.setProcessesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.ProcessCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_);
};
goog.inherits(proto.fontbakery.dashboard.ProcessCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.ProcessCommand.displayName = 'proto.fontbakery.dashboard.ProcessCommand';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.fontbakery.dashboard.ProcessCommand.oneofGroups_ = [[6,7]];

/**
 * @enum {number}
 */
proto.fontbakery.dashboard.ProcessCommand.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  JSON_PAYLOAD: 6,
  PB_PAYLOAD: 7
};

/**
 * @return {proto.fontbakery.dashboard.ProcessCommand.PayloadCase}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getPayloadCase = function() {
  return /** @type {proto.fontbakery.dashboard.ProcessCommand.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.ProcessCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.ProcessCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticket: jspb.Message.getFieldWithDefault(msg, 1, ""),
    targetPath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    callbackName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requester: jspb.Message.getFieldWithDefault(msg, 4, ""),
    responseQueueName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    jsonPayload: jspb.Message.getFieldWithDefault(msg, 6, ""),
    pbPayload: (f = msg.getPbPayload()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    sessionId: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.ProcessCommand}
 */
proto.fontbakery.dashboard.ProcessCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.ProcessCommand;
  return proto.fontbakery.dashboard.ProcessCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.ProcessCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.ProcessCommand}
 */
proto.fontbakery.dashboard.ProcessCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequester(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseQueueName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonPayload(value);
      break;
    case 7:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setPbPayload(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.ProcessCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.ProcessCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.ProcessCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTargetPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallbackName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequester();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getResponseQueueName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPbPayload();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string ticket = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getTicket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setTicket = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string target_path = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getTargetPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setTargetPath = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string callback_name = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getCallbackName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setCallbackName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string requester = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getRequester = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setRequester = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string response_queue_name = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getResponseQueueName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setResponseQueueName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string json_payload = 6;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getJsonPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setJsonPayload = function(value) {
  jspb.Message.setOneofField(this, 6, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.ProcessCommand.prototype.clearJsonPayload = function() {
  jspb.Message.setOneofField(this, 6, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.hasJsonPayload = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Any pb_payload = 7;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getPbPayload = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 7));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setPbPayload = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.fontbakery.dashboard.ProcessCommand.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.ProcessCommand.prototype.clearPbPayload = function() {
  this.setPbPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.hasPbPayload = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string session_id = 8;
 * @return {string}
 */
proto.fontbakery.dashboard.ProcessCommand.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.ProcessCommand.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthStatus.displayName = 'proto.fontbakery.dashboard.AuthStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authorizeUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    message: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    avatarUrl: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthStatus}
 */
proto.fontbakery.dashboard.AuthStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthStatus;
  return proto.fontbakery.dashboard.AuthStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthStatus}
 */
proto.fontbakery.dashboard.AuthStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.AuthStatus.StatusCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorizeUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthorizeUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvatarUrl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.AuthStatus.StatusCode = {
  ERROR: 0,
  OK: 1,
  INITIAL: 2,
  NOT_READY: 3,
  NO_SESSION: 4,
  WRONG_AUTHORIZE_STATE: 5,
  TIMED_OUT: 6
};

/**
 * optional StatusCode status = 1;
 * @return {!proto.fontbakery.dashboard.AuthStatus.StatusCode}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getStatus = function() {
  return /** @type {!proto.fontbakery.dashboard.AuthStatus.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.AuthStatus.StatusCode} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string authorize_url = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getAuthorizeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setAuthorizeUrl = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string message = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user_name = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setUserName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string avatar_url = 6;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthStatus.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthStatus.prototype.setAvatarUrl = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthorizeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthorizeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthorizeRequest.displayName = 'proto.fontbakery.dashboard.AuthorizeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthorizeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthorizeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    oAuthCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authorizeState: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthorizeRequest}
 */
proto.fontbakery.dashboard.AuthorizeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthorizeRequest;
  return proto.fontbakery.dashboard.AuthorizeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthorizeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthorizeRequest}
 */
proto.fontbakery.dashboard.AuthorizeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOAuthCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthorizeState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthorizeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthorizeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOAuthCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthorizeState();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string o_auth_code = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.getOAuthCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.setOAuthCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string session_id = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string authorize_state = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.getAuthorizeState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizeRequest.prototype.setAuthorizeState = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.SessionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.SessionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.SessionId.displayName = 'proto.fontbakery.dashboard.SessionId';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.SessionId.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.SessionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.SessionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.SessionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.SessionId}
 */
proto.fontbakery.dashboard.SessionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.SessionId;
  return proto.fontbakery.dashboard.SessionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.SessionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.SessionId}
 */
proto.fontbakery.dashboard.SessionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.SessionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.SessionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.SessionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.SessionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.SessionId.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.SessionId.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthorizedRolesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthorizedRolesRequest.displayName = 'proto.fontbakery.dashboard.AuthorizedRolesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthorizedRolesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthorizedRolesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    repoNameWithOwner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    initiator: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthorizedRolesRequest}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthorizedRolesRequest;
  return proto.fontbakery.dashboard.AuthorizedRolesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthorizedRolesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthorizedRolesRequest}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepoNameWithOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitiator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthorizedRolesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthorizedRolesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRepoNameWithOwner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInitiator();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string repo_name_with_owner = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.getRepoNameWithOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.setRepoNameWithOwner = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string initiator = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.getInitiator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizedRolesRequest.prototype.setInitiator = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.AuthorizedRoles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.AuthorizedRoles.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.AuthorizedRoles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.AuthorizedRoles.displayName = 'proto.fontbakery.dashboard.AuthorizedRoles';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.AuthorizedRoles.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.AuthorizedRoles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.AuthorizedRoles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRoles.toObject = function(includeInstance, msg) {
  var f, obj = {
    rolesList: jspb.Message.getRepeatedField(msg, 1),
    userName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.AuthorizedRoles}
 */
proto.fontbakery.dashboard.AuthorizedRoles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.AuthorizedRoles;
  return proto.fontbakery.dashboard.AuthorizedRoles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.AuthorizedRoles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.AuthorizedRoles}
 */
proto.fontbakery.dashboard.AuthorizedRoles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRoles(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.AuthorizedRoles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.AuthorizedRoles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.AuthorizedRoles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRolesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated string roles = 1;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.getRolesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.setRolesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.addRoles = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.fontbakery.dashboard.AuthorizedRoles.prototype.clearRolesList = function() {
  this.setRolesList([]);
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.AuthorizedRoles.prototype.setUserName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.OAuthToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.OAuthToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.OAuthToken.displayName = 'proto.fontbakery.dashboard.OAuthToken';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.OAuthToken.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.OAuthToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.OAuthToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.OAuthToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accessToken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.OAuthToken}
 */
proto.fontbakery.dashboard.OAuthToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.OAuthToken;
  return proto.fontbakery.dashboard.OAuthToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.OAuthToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.OAuthToken}
 */
proto.fontbakery.dashboard.OAuthToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.OAuthToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.OAuthToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.OAuthToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.OAuthToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string user_name = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.OAuthToken.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.OAuthToken.prototype.setUserName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string access_token = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.OAuthToken.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.OAuthToken.prototype.setAccessToken = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.OAuthToken.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.OAuthToken.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string scope = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.OAuthToken.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.OAuthToken.prototype.setScope = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.PullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.PullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.PullRequest.displayName = 'proto.fontbakery.dashboard.PullRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.PullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.PullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.PullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.PullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storageKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pRTarget: jspb.Message.getFieldWithDefault(msg, 3, ""),
    targetDirectory: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pRMessageTitle: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pRMessageBody: jspb.Message.getFieldWithDefault(msg, 6, ""),
    commitMessage: jspb.Message.getFieldWithDefault(msg, 7, ""),
    processCommand: (f = msg.getProcessCommand()) && proto.fontbakery.dashboard.ProcessCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.PullRequest}
 */
proto.fontbakery.dashboard.PullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.PullRequest;
  return proto.fontbakery.dashboard.PullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.PullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.PullRequest}
 */
proto.fontbakery.dashboard.PullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPRTarget(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetDirectory(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPRMessageTitle(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPRMessageBody(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitMessage(value);
      break;
    case 8:
      var value = new proto.fontbakery.dashboard.ProcessCommand;
      reader.readMessage(value,proto.fontbakery.dashboard.ProcessCommand.deserializeBinaryFromReader);
      msg.setProcessCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.PullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.PullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.PullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.PullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStorageKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPRTarget();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTargetDirectory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPRMessageTitle();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPRMessageBody();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCommitMessage();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getProcessCommand();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.fontbakery.dashboard.ProcessCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PullRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string storage_key = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getStorageKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PullRequest.prototype.setStorageKey = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string p_r_target = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getPRTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PullRequest.prototype.setPRTarget = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string target_directory = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getTargetDirectory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PullRequest.prototype.setTargetDirectory = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string p_r_message_title = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getPRMessageTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PullRequest.prototype.setPRMessageTitle = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string p_r_message_body = 6;
 * @return {string}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getPRMessageBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PullRequest.prototype.setPRMessageBody = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string commit_message = 7;
 * @return {string}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getCommitMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.PullRequest.prototype.setCommitMessage = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional ProcessCommand process_command = 8;
 * @return {?proto.fontbakery.dashboard.ProcessCommand}
 */
proto.fontbakery.dashboard.PullRequest.prototype.getProcessCommand = function() {
  return /** @type{?proto.fontbakery.dashboard.ProcessCommand} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.ProcessCommand, 8));
};


/** @param {?proto.fontbakery.dashboard.ProcessCommand|undefined} value */
proto.fontbakery.dashboard.PullRequest.prototype.setProcessCommand = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.fontbakery.dashboard.PullRequest.prototype.clearProcessCommand = function() {
  this.setProcessCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.PullRequest.prototype.hasProcessCommand = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.Issue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.Issue.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.Issue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.Issue.displayName = 'proto.fontbakery.dashboard.Issue';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.Issue.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.Issue.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.Issue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.Issue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.Issue.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    repoOwner: jspb.Message.getFieldWithDefault(msg, 2, ""),
    repoName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    body: jspb.Message.getFieldWithDefault(msg, 5, ""),
    milestone: jspb.Message.getFieldWithDefault(msg, 6, 0),
    labelsList: jspb.Message.getRepeatedField(msg, 7),
    assigneesList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.Issue}
 */
proto.fontbakery.dashboard.Issue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.Issue;
  return proto.fontbakery.dashboard.Issue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.Issue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.Issue}
 */
proto.fontbakery.dashboard.Issue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepoOwner(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepoName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMilestone(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addAssignees(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.Issue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.Issue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.Issue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.Issue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRepoOwner();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRepoName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMilestone();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getAssigneesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * optional string session_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.Issue.prototype.getSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Issue.prototype.setSessionId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string repo_owner = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.Issue.prototype.getRepoOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Issue.prototype.setRepoOwner = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string repo_name = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.Issue.prototype.getRepoName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Issue.prototype.setRepoName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.fontbakery.dashboard.Issue.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Issue.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string body = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.Issue.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.Issue.prototype.setBody = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 milestone = 6;
 * @return {number}
 */
proto.fontbakery.dashboard.Issue.prototype.getMilestone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.fontbakery.dashboard.Issue.prototype.setMilestone = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string labels = 7;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.Issue.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.Issue.prototype.setLabelsList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.Issue.prototype.addLabels = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.fontbakery.dashboard.Issue.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};


/**
 * repeated string assignees = 8;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.Issue.prototype.getAssigneesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.Issue.prototype.setAssigneesList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.Issue.prototype.addAssignees = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.fontbakery.dashboard.Issue.prototype.clearAssigneesList = function() {
  this.setAssigneesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.GitHubReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.fontbakery.dashboard.GitHubReport.oneofGroups_);
};
goog.inherits(proto.fontbakery.dashboard.GitHubReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.GitHubReport.displayName = 'proto.fontbakery.dashboard.GitHubReport';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.fontbakery.dashboard.GitHubReport.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.fontbakery.dashboard.GitHubReport.ValueCase = {
  VALUE_NOT_SET: 0,
  URL: 2,
  ERROR: 3
};

/**
 * @return {proto.fontbakery.dashboard.GitHubReport.ValueCase}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.getValueCase = function() {
  return /** @type {proto.fontbakery.dashboard.GitHubReport.ValueCase} */(jspb.Message.computeOneofCase(this, proto.fontbakery.dashboard.GitHubReport.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.GitHubReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.GitHubReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.GitHubReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    url: jspb.Message.getFieldWithDefault(msg, 2, ""),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    issueNumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    branchUrl: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.GitHubReport}
 */
proto.fontbakery.dashboard.GitHubReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.GitHubReport;
  return proto.fontbakery.dashboard.GitHubReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.GitHubReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.GitHubReport}
 */
proto.fontbakery.dashboard.GitHubReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.fontbakery.dashboard.GitHubReport.Result} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIssueNumber(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranchUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.GitHubReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.GitHubReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.GitHubReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIssueNumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBranchUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.fontbakery.dashboard.GitHubReport.Result = {
  FAIL: 0,
  OK: 1
};

/**
 * optional Result status = 1;
 * @return {!proto.fontbakery.dashboard.GitHubReport.Result}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.getStatus = function() {
  return /** @type {!proto.fontbakery.dashboard.GitHubReport.Result} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.fontbakery.dashboard.GitHubReport.Result} value */
proto.fontbakery.dashboard.GitHubReport.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.GitHubReport.prototype.setUrl = function(value) {
  jspb.Message.setOneofField(this, 2, proto.fontbakery.dashboard.GitHubReport.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.GitHubReport.prototype.clearUrl = function() {
  jspb.Message.setOneofField(this, 2, proto.fontbakery.dashboard.GitHubReport.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.GitHubReport.prototype.setError = function(value) {
  jspb.Message.setOneofField(this, 3, proto.fontbakery.dashboard.GitHubReport.oneofGroups_[0], value);
};


proto.fontbakery.dashboard.GitHubReport.prototype.clearError = function() {
  jspb.Message.setOneofField(this, 3, proto.fontbakery.dashboard.GitHubReport.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 issue_number = 4;
 * @return {number}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.getIssueNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.fontbakery.dashboard.GitHubReport.prototype.setIssueNumber = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string branch_url = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.GitHubReport.prototype.getBranchUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.GitHubReport.prototype.setBranchUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.WorkerDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.WorkerDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.WorkerDescription.displayName = 'proto.fontbakery.dashboard.WorkerDescription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.WorkerDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.WorkerDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.WorkerDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.WorkerDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    workerName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    job: (f = msg.getJob()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    processCommand: (f = msg.getProcessCommand()) && proto.fontbakery.dashboard.ProcessCommand.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.WorkerDescription}
 */
proto.fontbakery.dashboard.WorkerDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.WorkerDescription;
  return proto.fontbakery.dashboard.WorkerDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.WorkerDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.WorkerDescription}
 */
proto.fontbakery.dashboard.WorkerDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setJob(value);
      break;
    case 3:
      var value = new proto.fontbakery.dashboard.ProcessCommand;
      reader.readMessage(value,proto.fontbakery.dashboard.ProcessCommand.deserializeBinaryFromReader);
      msg.setProcessCommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.WorkerDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.WorkerDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.WorkerDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.WorkerDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJob();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getProcessCommand();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.fontbakery.dashboard.ProcessCommand.serializeBinaryToWriter
    );
  }
};


/**
 * optional string worker_name = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.WorkerDescription.prototype.getWorkerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.WorkerDescription.prototype.setWorkerName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any job = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.WorkerDescription.prototype.getJob = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.WorkerDescription.prototype.setJob = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.WorkerDescription.prototype.clearJob = function() {
  this.setJob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.WorkerDescription.prototype.hasJob = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ProcessCommand process_command = 3;
 * @return {?proto.fontbakery.dashboard.ProcessCommand}
 */
proto.fontbakery.dashboard.WorkerDescription.prototype.getProcessCommand = function() {
  return /** @type{?proto.fontbakery.dashboard.ProcessCommand} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.ProcessCommand, 3));
};


/** @param {?proto.fontbakery.dashboard.ProcessCommand|undefined} value */
proto.fontbakery.dashboard.WorkerDescription.prototype.setProcessCommand = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fontbakery.dashboard.WorkerDescription.prototype.clearProcessCommand = function() {
  this.setProcessCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.WorkerDescription.prototype.hasProcessCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.WorkerJobDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.WorkerJobDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.WorkerJobDescription.displayName = 'proto.fontbakery.dashboard.WorkerJobDescription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.WorkerJobDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.WorkerJobDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.WorkerJobDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.WorkerJobDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    workerName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    job: (f = msg.getJob()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.WorkerJobDescription}
 */
proto.fontbakery.dashboard.WorkerJobDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.WorkerJobDescription;
  return proto.fontbakery.dashboard.WorkerJobDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.WorkerJobDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.WorkerJobDescription}
 */
proto.fontbakery.dashboard.WorkerJobDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setJob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.WorkerJobDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.WorkerJobDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.WorkerJobDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.WorkerJobDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJob();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string worker_name = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.WorkerJobDescription.prototype.getWorkerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.WorkerJobDescription.prototype.setWorkerName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any job = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.WorkerJobDescription.prototype.getJob = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.WorkerJobDescription.prototype.setJob = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.WorkerJobDescription.prototype.clearJob = function() {
  this.setJob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.WorkerJobDescription.prototype.hasJob = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.CompletedWorker = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.CompletedWorker, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.CompletedWorker.displayName = 'proto.fontbakery.dashboard.CompletedWorker';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.CompletedWorker.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.CompletedWorker.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.CompletedWorker} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CompletedWorker.toObject = function(includeInstance, msg) {
  var f, obj = {
    workerName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    completedMessage: (f = msg.getCompletedMessage()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.CompletedWorker}
 */
proto.fontbakery.dashboard.CompletedWorker.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.CompletedWorker;
  return proto.fontbakery.dashboard.CompletedWorker.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.CompletedWorker} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.CompletedWorker}
 */
proto.fontbakery.dashboard.CompletedWorker.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkerName(value);
      break;
    case 2:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setCompletedMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.CompletedWorker.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.CompletedWorker.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.CompletedWorker} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.CompletedWorker.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWorkerName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCompletedMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string worker_name = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.CompletedWorker.prototype.getWorkerName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.CompletedWorker.prototype.setWorkerName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Any completed_message = 2;
 * @return {?proto.google.protobuf.Any}
 */
proto.fontbakery.dashboard.CompletedWorker.prototype.getCompletedMessage = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 2));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.fontbakery.dashboard.CompletedWorker.prototype.setCompletedMessage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.CompletedWorker.prototype.clearCompletedMessage = function() {
  this.setCompletedMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.CompletedWorker.prototype.hasCompletedMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.FontBakeryFinished = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.FontBakeryFinished, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.FontBakeryFinished.displayName = 'proto.fontbakery.dashboard.FontBakeryFinished';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.FontBakeryFinished.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.FontBakeryFinished} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FontBakeryFinished.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    finishedOrderly: jspb.Message.getFieldWithDefault(msg, 2, false),
    resultsJson: jspb.Message.getFieldWithDefault(msg, 3, ""),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    started: (f = msg.getStarted()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    finished: (f = msg.getFinished()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.FontBakeryFinished}
 */
proto.fontbakery.dashboard.FontBakeryFinished.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.FontBakeryFinished;
  return proto.fontbakery.dashboard.FontBakeryFinished.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.FontBakeryFinished} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.FontBakeryFinished}
 */
proto.fontbakery.dashboard.FontBakeryFinished.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinishedOrderly(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultsJson(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.FontBakeryFinished.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.FontBakeryFinished} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.FontBakeryFinished.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFinishedOrderly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getResultsJson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string docid = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.setDocid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool finished_orderly = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.getFinishedOrderly = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.setFinishedOrderly = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string results_json = 3;
 * @return {string}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.getResultsJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.setResultsJson = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp created = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.FontBakeryFinished.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp started = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.getStarted = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.setStarted = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.fontbakery.dashboard.FontBakeryFinished.prototype.clearStarted = function() {
  this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp finished = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.getFinished = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.setFinished = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.fontbakery.dashboard.FontBakeryFinished.prototype.clearFinished = function() {
  this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.FontBakeryFinished.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.fontbakery.dashboard.GenericStorageWorkerResult.repeatedFields_, null);
};
goog.inherits(proto.fontbakery.dashboard.GenericStorageWorkerResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.GenericStorageWorkerResult.displayName = 'proto.fontbakery.dashboard.GenericStorageWorkerResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.GenericStorageWorkerResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.GenericStorageWorkerResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    started: (f = msg.getStarted()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    finished: (f = msg.getFinished()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    exception: jspb.Message.getFieldWithDefault(msg, 5, ""),
    preparationLogsList: jspb.Message.getRepeatedField(msg, 6),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.GenericStorageWorkerResult}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.GenericStorageWorkerResult;
  return proto.fontbakery.dashboard.GenericStorageWorkerResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.GenericStorageWorkerResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.GenericStorageWorkerResult}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStarted(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFinished(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setException(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addPreparationLogs(value);
      break;
    case 7:
      var value = new proto.fontbakery.dashboard.GenericStorageWorkerResult.Result;
      reader.readMessage(value,proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.GenericStorageWorkerResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.GenericStorageWorkerResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getStarted();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFinished();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getException();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPreparationLogsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.fontbakery.dashboard.GenericStorageWorkerResult.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.displayName = 'proto.fontbakery.dashboard.GenericStorageWorkerResult.Result';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.toObject = function(opt_includeInstance) {
  return proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    storageKey: (f = msg.getStorageKey()) && proto.fontbakery.dashboard.StorageKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.fontbakery.dashboard.GenericStorageWorkerResult.Result;
  return proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.fontbakery.dashboard.StorageKey;
      reader.readMessage(value,proto.fontbakery.dashboard.StorageKey.deserializeBinaryFromReader);
      msg.setStorageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStorageKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.fontbakery.dashboard.StorageKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StorageKey storage_key = 2;
 * @return {?proto.fontbakery.dashboard.StorageKey}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.getStorageKey = function() {
  return /** @type{?proto.fontbakery.dashboard.StorageKey} */ (
    jspb.Message.getWrapperField(this, proto.fontbakery.dashboard.StorageKey, 2));
};


/** @param {?proto.fontbakery.dashboard.StorageKey|undefined} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.setStorageKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.clearStorageKey = function() {
  this.setStorageKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.Result.prototype.hasStorageKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string job_id = 1;
 * @return {string}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.getJobId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.setJobId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp created = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp started = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.getStarted = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.setStarted = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.clearStarted = function() {
  this.setStarted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.hasStarted = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp finished = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.getFinished = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.setFinished = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.clearFinished = function() {
  this.setFinished(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.hasFinished = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string exception = 5;
 * @return {string}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.getException = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.setException = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated string preparation_logs = 6;
 * @return {!Array<string>}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.getPreparationLogsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array<string>} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.setPreparationLogsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.addPreparationLogs = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.clearPreparationLogsList = function() {
  this.setPreparationLogsList([]);
};


/**
 * repeated Result results = 7;
 * @return {!Array<!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result>}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.fontbakery.dashboard.GenericStorageWorkerResult.Result, 7));
};


/** @param {!Array<!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result>} value */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result=} opt_value
 * @param {number=} opt_index
 * @return {!proto.fontbakery.dashboard.GenericStorageWorkerResult.Result}
 */
proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.fontbakery.dashboard.GenericStorageWorkerResult.Result, opt_index);
};


proto.fontbakery.dashboard.GenericStorageWorkerResult.prototype.clearResultsList = function() {
  this.setResultsList([]);
};


goog.object.extend(exports, proto.fontbakery.dashboard);
